package de.al1c3.teensytool;

import org.bouncycastle.cms.CMSException;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.pkcs.PKCSException;
import org.bouncycastle.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.Key;
import java.security.SecureRandom;
import java.security.Security;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static de.al1c3.teensytool.Utils.*;

/**
 * Teensy 4.1 lockable code uploader
 */
public class TeensySecureUploader
{
    private final CSFTool csfTool;
    private final byte[] eKey;

    /**
     * generate signed bootloader image
     *
     * @param loaderSource unsigned bootloader, as extracted from teensy_secure.exe
     * @return signed bootloader image
     * @throws IOException
     * @throws OperatorCreationException
     * @throws CMSException
     */
    private byte[] generateLoader(byte[] loaderSource) throws IOException, OperatorCreationException, CMSException {
        int startAddress = 0x20208000;
        byte[] csf = csfTool.makeCsf(loaderSource,startAddress);
        byte[] signedloader = concatAll(loaderSource,csf);
        byte[] paddedSignedLoader = new byte[0x15a0];
        System.arraycopy(signedloader,0,paddedSignedLoader,0,signedloader.length);
        return paddedSignedLoader;
    }

    /**
     * Generate flash image for secured teensy 4.1
     *
     * @param data program data
     * @param addr loading address
     * @param habData HAB data, as extracted from teensy_secure.exe
     * @return flash image
     * @throws Exception If anything goes wrong
     */

    private byte[] generateFlashImage(byte[] data, int addr, byte[] habData) throws Exception {
        byte[] nonce = new byte[12];
        new SecureRandom().nextBytes(nonce);
        byte[] program = Arrays.copyOf(data,data.length);
        int addressStartSign = 0x1000;
        int addressStart = 0x1400;
        int addressCSF = extractIntLE(program,0x1018) - addr;
        int addressBD = extractIntLE(program,0x1010) - addr;
        int proglen = addressCSF - addressStart;
        byte[] payload = Arrays.copyOfRange(program,addressStart,addressStart + proglen);

        System.arraycopy(habData,0,program, 0x1040, habData.length);
        System.arraycopy(nonce,0,program,0x10d8,nonce.length);
        insertIntLE(program,0x10e4, extractIntLE(program,0x1004));
        insertIntLE(program, addressBD, addr);
        insertIntLE(program, addressBD + 4, program.length);
        insertIntLE(program,0x10d0, addressStart + addr);
        insertIntLE(program,0x10d4, addressCSF + addr);
        insertIntLE(program, 0x1004, 0x1041 + addr);

        nonce = concatAll(reverse(nonce),toByteArray((addr + addressStart) >> 4));

        Key key = new SecretKeySpec(this.eKey, "AES");
        Cipher aes = Cipher.getInstance("AES/CTR/NoPadding", BouncyCastleProvider.PROVIDER_NAME);

        aes.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(nonce));
        byte[] payloadEnc = aes.doFinal(payload);

        System.arraycopy(payloadEnc,0,program, addressStart, payloadEnc.length);


        byte[] csf = csfTool.makeCsf(Arrays.copyOfRange(program,addressStartSign,addressCSF),addressStartSign + addr);
        System.arraycopy(csf,0,program,addressCSF,csf.length);

        return program;
    }

    /**
     * Create new TeensySecureUploader
     *
     * @param cert Certificate as PEM
     * @param key1 Key1 (signing) as PEM
     * @param key1password Password to decrypt Key1
     * @param key2 Key2 (symmetric encryption key) as PEM
     * @param key2password Password to decrypt Key2
     * @throws IOException If anything goes wrong
     */
    TeensySecureUploader(byte[] cert, byte[] key1, String key1password, byte[] key2, String key2password) throws IOException, OperatorCreationException, PKCSException {
        Security.addProvider(new BouncyCastleProvider());
        this.csfTool = new CSFTool(cert,key1,key1password);
        this.eKey = extractXDHFormattedAESKey(key2,key2password);
    }

    /**
     * Create new TeensySecureUploader from key.pem
     *
     * @param keyPem Concatenated key.pem as generated by teensyduino
     * @throws IOException If anything goes wrong
     */
    public static TeensySecureUploader fromKeyPem(byte[] keyPem) throws IOException, OperatorCreationException, PKCSException {
        String defaultPassword = "test"; // Teensyduino always uses this as the password for the keys as of now.
        byte[] cert = null;
        byte[] key1 = null;
        byte[] key2 = null;
        String concatenatedPemFiles = new String(keyPem, StandardCharsets.US_ASCII);
        Pattern pemFilePattern = Pattern.compile("(-----BEGIN[^-]+-----\\R(?:(?!-----).)+-----END[^-]+-----)",Pattern.DOTALL);
        Matcher pemFileMatcher = pemFilePattern.matcher(concatenatedPemFiles);
        if (pemFileMatcher.find()) {
            cert = pemFileMatcher.group().getBytes(StandardCharsets.US_ASCII);
        }
        if (pemFileMatcher.find()) {
            key1 = pemFileMatcher.group().getBytes(StandardCharsets.US_ASCII);
        }
        if (pemFileMatcher.find()) {
            key2 = pemFileMatcher.group().getBytes(StandardCharsets.US_ASCII);
        }
        if (cert == null || key1 == null || key2 == null)
            throw new IOException("Could not read keyfile");
        return new TeensySecureUploader(cert,key1,defaultPassword,key2,defaultPassword);
    }

    /**
     * Encrypt, sign and upload loader and program to teensy
     *
     * @param program Teensy 4.1 program, as read from ino.hex file
     * @param addr Starting address of program
     * @throws Exception If anything goes wrong
     */
    public void uploadProgram(byte[] program, int addr, byte[] loaderSource, byte[] habData) throws Exception {
        byte[] loader = generateLoader(loaderSource);
        byte[] data = generateFlashImage(program, addr, habData);
        try {
            NXPSDP nxpsdp = new NXPSDP();
            nxpsdp.sendLoader(loader, 0x20208000);
            nxpsdp.shutdown();
            Thread.sleep(1000);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Could not upload loader, trying to continue anyway");
        }
        HalfKay halfKay = new HalfKay();
        halfKay.writeData(data);
        halfKay.reboot(true);
        halfKay.shutdown();
    }

    /**
     * Encrypt, sign and write program as Teensy.exe ehex file to disk
     *
     * @param program Teensy 4.1 program, as read from ino.hex file
     * @param addr Starting address of program
     * @param filename Filename to write processed program to
     * @throws Exception If anything goes wrong
     */
    public void writeEHex(byte[] program, int addr, byte[] loaderSource, byte[] habData, String filename) throws Exception {
        byte[] loader = generateLoader(loaderSource);
        byte[] data = generateFlashImage(program, addr, habData);
        Files.writeString(new File(filename).toPath(),makeHexFile(0x60000000, data) + makeHexFile(0x20208000,loader));
    }
}